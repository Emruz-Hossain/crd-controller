# create dedicated namespace for apiserver
apiVersion: v1
kind: Namespace
metadata:
  name: crd-apiserver-ns
spec:
---

# create service account for authorization of apiserver
kind: ServiceAccount
apiVersion: v1
metadata:
  name: crd-apiserver-sa
  namespace: crd-apiserver-ns
---

# create ClusterRoleBinding to delegate auth decisions to Kubernetes Core API server
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: crd-apiserver:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: crd-apiserver-sa
  namespace: crd-apiserver-ns
---

# create RoleBinding to allow apiserver to access "extension-apiserver-authentication" configmap
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: crd-apiserver-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: crd-apiserver-sa
  namespace: crd-apiserver-ns
---

# create Deployment for apiserver and etcd
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crd-apiserver
  namespace: crd-apiserver-ns
  labels:
    apiserver: "crd-apiserver"
spec:
  replicas: 1
  selector:
    matchLabels:
      apiserver: "crd-apiserver"
  template:
    metadata:
      labels:
        apiserver: "crd-apiserver"
    spec:
      serviceAccountName: crd-apiserver-sa
      containers:
      - name: crd-apiserver
        image: emruzhossain/crd-apiserver:latest
        imagePullPolicy: IfNotPresent
        command: [ "/crd-controller"]
      - name: etcd
        image: quay.io/coreos/etcd:v3.2.14

---
apiVersion: apiregistration.k8s.io/v1beta1
kind: APIService
metadata:
  name: v1alpha1.crd.emruz.com
spec:
  insecureSkipTLSVerify: true
  group: crd.emruz.com
  groupPriorityMinimum: 1000
  versionPriority: 15
  service:
    name: api
    namespace: crd-apiserver-ns
  version: v1alpha1
